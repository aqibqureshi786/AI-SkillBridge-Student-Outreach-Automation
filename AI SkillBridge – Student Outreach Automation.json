{
  "name": "AI SkillBridge ‚Äì Student Outreach Automation",
  "nodes": [
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "mode": "url",
          "value": "={{ $('Settings').item.json.sheet_url }}"
        },
        "sheetName": {
          "__rl": true,
          "mode": "url",
          "value": "={{ $('Settings').item.json.sheet_url }}"
        },
        "columns": {
          "value": {
            "row_number": "={{ $('To email?').item.json.row_number }}",
            "first_emailed": "={{ $now.format('yyyy-MM-dd') }}"
          },
          "schema": [
            {
              "id": "email",
              "type": "string",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "email",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "first_emailed",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "first_emailed",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "name",
              "type": "string",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "name",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "company",
              "type": "string",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "company",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": true,
              "required": false,
              "displayName": "row_number",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [
            "row_number"
          ]
        },
        "options": {}
      },
      "id": "8565747a-4108-4467-98e4-f57d441f66af",
      "name": "Update last contacted time",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        2432,
        240
      ],
      "typeVersion": 4.2,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "r1uGKSXZDAx3tjRo",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "fields": {
          "values": [
            {
              "name": "message_template",
              "stringValue": "={{ $('Email sequence').first().json.emails[0].message }}"
            },
            {
              "name": "email",
              "stringValue": "david@thedavid.co.uk"
            },
            {
              "name": "name",
              "stringValue": "Daffyd"
            },
            {
              "name": "company",
              "stringValue": "Davey Enterprises"
            },
            {
              "name": "subject",
              "stringValue": "={{ $('Settings').item.json.subject }}"
            },
            {
              "name": "sender_name",
              "stringValue": "={{ $('Settings').item.json.sender_name }}"
            },
            {
              "name": "mail_id",
              "stringValue": "={{ $('Settings').item.json.mail_id }}"
            },
            {
              "name": "mail_seq",
              "stringValue": "0"
            }
          ]
        },
        "include": "none",
        "options": {}
      },
      "id": "5f079ac7-1bef-4bb8-8efe-1f3803357fb1",
      "name": "Set message template",
      "type": "n8n-nodes-base.set",
      "position": [
        1552,
        1232
      ],
      "typeVersion": 3.2,
      "disabled": true
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"emails\": [\n    {\n      \"subject\": \"üöÄ Join Our Free AI Bootcamp + Chance to Win a Laptop!\",\n      \"message\": \"Hi {name},<br /><br />\\nWe‚Äôre thrilled to announce that <b>AI SkillBridge</b> is launching <b>Free AI Bootcamps</b> for students! üöÄ<br /><br />\\n‚ú® What‚Äôs in it for you?<br />\\n- 100% Free AI Training Bootcamps<br />\\n- Free Laptops for the Top 100 Students üíª<br />\\n- Amazing Opportunities: internships, projects & career growth üåü<br /><br />\\nüëâ The first step is to fill out this quick form: <a href='https://forms.gle/xyz123'>Bootcamp Registration Form</a><br /><br />\\nYou can also learn more about us here: <a href='https://aiskillbridge.com'>AI SkillBridge</a><br /><br />\\nDon‚Äôt miss this chance to kickstart your journey in AI ‚Äî for free!<br /><br />\\nBest,<br />\\nThe AI SkillBridge Team<br />\",\n      \"send_on_day\": 0\n    },\n    {\n      \"subject\": \"‚è≥ Reminder: Register Now for Free AI Bootcamps\",\n      \"message\": \"Hi {name},<br /><br />\\nJust reminding you ‚Äî our <b>Free AI Bootcamps</b> at <b>AI SkillBridge</b> are filling up fast! üåü<br /><br />\\nWhy join?<br />\\n- Free AI Bootcamps üöÄ<br />\\n- Free Laptops for Top 100 Students üíª<br />\\n- Great opportunities for internships & projects üî•<br /><br />\\nüëâ Register now to secure your spot: <a href='https://forms.gle/xyz123'>Bootcamp Registration Form</a><br /><br />\\nMore info here: <a href='https://aiskillbridge.com'>AI SkillBridge</a><br /><br />\\nWe‚Äôd love to see you grow with us!<br /><br />\\nBest regards,<br />\\nThe AI SkillBridge Team<br />\",\n      \"send_on_day\": 3\n    },\n    {\n      \"subject\": \"üî• Last Chance: Free AI Bootcamp + Laptop Giveaway\",\n      \"message\": \"Hi {name},<br /><br />\\nThis is your <b>final chance</b> to register for our <b>Free AI Bootcamps</b> at AI SkillBridge. üöÄ<br /><br />\\nRemember:<br />\\n‚úî Free AI Training<br />\\n‚úî Free Laptops for the Top 100 Students üíª<br />\\n‚úî Amazing career opportunities üåç<br /><br />\\nüëâ Register today: <a href='https://forms.gle/xyz123'>Bootcamp Registration Form</a><br /><br />\\nMore info: <a href='https://aiskillbridge.com'>AI SkillBridge</a><br /><br />\\nDon‚Äôt miss out ‚Äî seats are almost gone!<br /><br />\\nCheers,<br />\\nThe AI SkillBridge Team<br />\",\n      \"send_on_day\": 7\n    }\n  ]\n}\n",
        "options": {}
      },
      "id": "7ff4eabc-f49a-4adc-9a4b-750585b72070",
      "name": "Email sequence",
      "type": "n8n-nodes-base.set",
      "position": [
        1056,
        240
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "function extractPlaceholders(str) {\n    // Regular expression to match placeholders\n    // It matches any alphanumeric character including dashes and underscores between {}\n    const regex = /\\{([a-zA-Z0-9_-]+)\\}/g;\n    \n    // Set to store unique placeholders\n    const uniquePlaceholders = new Set();\n\n    // Extract and store unique placeholders\n    let match;\n    while ((match = regex.exec(str)) !== null) {\n        uniquePlaceholders.add(match[1]);\n    }\n\n    // Convert the Set to an array and return\n    return Array.from(uniquePlaceholders);\n}\n\nlet placeholders = Object.keys(item.json.placeholders)\nconsole.log(placeholders)\n\n// Substitute all the placeholders in the message\n  item.json.message = item.json.message_template\n  for (let key of extractPlaceholders(item.json.message_template)) {\n    if(!placeholders.includes(key)) throw new Error(`Missing data for placeholder '{${key}}'`)\n    const regex = new RegExp(`\\\\{${key}\\\\}`, 'g'); // Create a regex to match the exact word surrounded by {}\n    item.json.message = item.json.message.replaceAll(regex, item.json.placeholders[key]);\n  }\n\nreturn item"
      },
      "id": "7b038199-cf02-4536-a351-b86d51b0d367",
      "name": "Fill message placeholders",
      "type": "n8n-nodes-base.code",
      "position": [
        1776,
        1232
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "fields": {
          "values": [
            {
              "name": "message",
              "stringValue": "=<span data-cam='{{ $json.mail_id }}' data-seq='{{ $json.mail_seq }}' data-ph='{{ JSON.stringify($json.placeholders) }}'></span>{{ $json.message }}"
            }
          ]
        },
        "options": {}
      },
      "id": "42fe4448-1a44-47aa-a04b-927d441b265a",
      "name": "Compose message",
      "type": "n8n-nodes-base.set",
      "position": [
        2000,
        1232
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "resource": "thread",
        "returnAll": true,
        "filters": {
          "q": "=subject:{{ $json.subject }} after:{{ $now.minus({'days': $json.emails.last().send_on_day+1}).toSQL().substr(0, 10) }}"
        }
      },
      "id": "bccf2e89-852e-49b4-ad98-194008c47760",
      "name": "Get previous message threads",
      "type": "n8n-nodes-base.gmail",
      "position": [
        1328,
        720
      ],
      "typeVersion": 2.1,
      "webhookId": "ab0c634c-b5f7-4b86-bf73-1b9889eb541d",
      "credentials": {
        "gmailOAuth2": {
          "id": "fDnA9srVk8MLF6IH",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "resource": "thread",
        "operation": "get",
        "threadId": "={{ $json.id }}",
        "simple": false,
        "options": {}
      },
      "id": "3ce6c45f-a257-4270-a84d-6a19ec35b2eb",
      "name": "Get thread details",
      "type": "n8n-nodes-base.gmail",
      "position": [
        1552,
        720
      ],
      "typeVersion": 2,
      "webhookId": "287853b4-bafa-49d0-9699-300d2af93781",
      "credentials": {
        "gmailOAuth2": {
          "id": "fDnA9srVk8MLF6IH",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Because emails are sent slightly after the schedule trigger runs, we'll end up waiting an extra day to send unless we take into account the execution time of the workflow\nlet buffer_mins = 20\n\nlet templates = $('Email sequence').first().json.emails\n\nfunction next_sequence_number(messages, mail_id, sender_name) {\n  for (let i = 0; i < messages.length; i++) {\n    if(!('html' in messages[i])) return -1;\n    let in_campaign = messages[i].html.includes(\"data-cam='\"+mail_id+\"'\")\n    let valid_seq = messages[i].html.includes(\"data-seq='\"+i+\"'\")\n    let from_us = messages[i].From.includes(sender_name)\n    console.log(in_campaign + \", \" + valid_seq + \", \" + from_us)\n    if(!(from_us && in_campaign && valid_seq)) {\n      return -1;\n    }\n  }\n  return messages.length;\n}\n\n\nfor (const item of $input.all()) {\n  item.json.first_message_at = DateTime.fromMillis($('Get thread details').item.json.messages[0].internalDate*1)\n  item.json.days_since_first_message = DateTime.now().diff(item.json.first_message_at, 'days').days\n  item.json.next_sequence_number = next_sequence_number(\n    item.json.messages,\n    $('Settings').first().json.mail_id,\n    $('Settings').first().json.sender_name\n  );\n  item.json.next_message_due = (\n    item.json.next_sequence_number > 0\n    && item.json.next_sequence_number < templates.length\n    && templates[item.json.next_sequence_number].send_on_day <= item.json.days_since_first_message + (buffer_mins/60/24)\n  )\n\n  // Retrieve the placeholder values from the snippet, for use in future messages\n  const ph_matches = item.json.messages[0].snippet.match(/data-ph='([^']*)'/)\n  if(ph_matches?.length > 1) {\n    const placeholders = JSON.parse(ph_matches[1])\n    for(key of placeholders.keys()) {\n      item.json[key] = placeholders[key]\n    }\n  }\n\n}\n\nreturn $input.all();"
      },
      "id": "9224bb16-fbc2-45b5-a2cb-f63cb440f46f",
      "name": "Classify threads",
      "type": "n8n-nodes-base.code",
      "position": [
        2000,
        720
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "00cf6401-f45a-4496-803c-70a5b2d7daf5",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              },
              "leftValue": "={{ $json.next_message_due }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "776cb743-339d-49f6-af3c-9ae2b464d01a",
      "name": "Next message due?",
      "type": "n8n-nodes-base.filter",
      "position": [
        2208,
        720
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "content": "Follow-up is due if:\n- All the messages in the thread are automated (no-one has replied yet)\n- Enough time has passed for the next message to be sent",
        "height": 344.96230939963334,
        "width": 181.66573318934627,
        "color": 7
      },
      "id": "2ecf68b5-f5bf-4961-a849-7c0d29940387",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1968,
        528
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "a3a78abb-0691-4152-a349-658b8286df2f",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        1328,
        1232
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "dc8ec88f-daef-46be-b3da-1407d5e1c0b1",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              },
              "leftValue": "={{ $json.reply_message_id }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "a62bff23-2742-4a5e-8896-e1a3be5915fd",
      "name": "Replying?",
      "type": "n8n-nodes-base.if",
      "position": [
        2208,
        1232
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "sendTo": "={{ $json.to_email }}",
        "subject": "={{ $json.subject }}",
        "message": "={{ $json.message }}",
        "options": {
          "appendAttribution": false,
          "senderName": "={{ $json.sender_name }}"
        }
      },
      "id": "76d25df2-4472-40a6-80c6-f2e3dc8702a3",
      "name": "Send new message",
      "type": "n8n-nodes-base.gmail",
      "position": [
        2432,
        1344
      ],
      "typeVersion": 2.1,
      "webhookId": "ed1806a0-b3fd-4682-ad7b-c1ab42a65231",
      "credentials": {
        "gmailOAuth2": {
          "id": "fDnA9srVk8MLF6IH",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "workflowId": "={{ $workflow.id }}",
        "options": {}
      },
      "id": "ceefaf78-28b8-4711-b50e-b5487862dba6",
      "name": "Call message send sub-workflow",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        2880,
        720
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "fields": {
          "values": [
            {
              "name": "message_template",
              "stringValue": "={{ $('Email sequence').first().json.emails[$json.next_sequence_number].message }}"
            },
            {
              "name": "reply_message_id",
              "stringValue": "={{ $json.messages.last().id }}"
            },
            {
              "name": "sender_name",
              "stringValue": "={{ $('Settings').item.json.sender_name }}"
            },
            {
              "name": "mail_id",
              "stringValue": "={{ $('Settings').item.json.mail_id }}"
            },
            {
              "name": "mail_seq",
              "stringValue": "={{ $json.next_sequence_number }}"
            },
            {
              "name": "to",
              "stringValue": "={{ $json.messages[0].To }}"
            }
          ]
        },
        "include": "none",
        "options": {}
      },
      "id": "809e9df8-881a-4b32-a3c0-e55c669bd8d1",
      "name": "Prepare reply params",
      "type": "n8n-nodes-base.set",
      "position": [
        2432,
        720
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "fields": {
          "values": [
            {
              "name": "message_template",
              "stringValue": "={{ $('Email sequence').first().json.emails[0].message }}"
            },
            {
              "name": "to_email",
              "stringValue": "={{ $('Get emails').item.json[$('Settings').item.json.email_column_name] }}"
            },
            {
              "name": "subject",
              "stringValue": "={{ $('Settings').item.json.subject }}"
            },
            {
              "name": "sender_name",
              "stringValue": "={{ $('Settings').item.json.sender_name }}"
            },
            {
              "name": "mail_id",
              "stringValue": "={{ $('Settings').item.json.mail_id }}"
            },
            {
              "name": "mail_seq",
              "stringValue": "0"
            }
          ]
        },
        "options": {}
      },
      "id": "cdda96f1-e0a2-4ce8-bc78-da8e80f7029f",
      "name": "Prepare first message params",
      "type": "n8n-nodes-base.set",
      "position": [
        1776,
        240
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "content": "Columns the sheet needs\n- email\n- first_emailed (leave blank - will be filled in automatically)\n- Other columns matching placeholders in email sequence",
        "height": 410.4105111871959,
        "width": 181.66573318934627,
        "color": 7
      },
      "id": "c2d9869e-0608-472a-a124-26e9e6f1820a",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1296,
        0
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "workflowId": "={{ $workflow.id }}",
        "mode": "each",
        "options": {}
      },
      "id": "26bc2c58-fea5-4ee0-b9ea-264ad00e8d32",
      "name": "Call message send sub-workflow1",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        2208,
        240
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "eeec5901-5ff0-47b1-926b-e93097d64434",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              },
              "leftValue": "={{ $json.first_emailed.isEmpty() }}",
              "rightValue": ""
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "e7e7d9bd-79c6-4534-b88d-b54cc695c7bf",
      "name": "To email?",
      "type": "n8n-nodes-base.filter",
      "position": [
        1552,
        240
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "// TODO: Some messages have an empty payload and a parts field instead (containing an array)\n\nfor (const item of $input.all()) {\n  for (const message of item.json.messages) {\n    console.log('message', message.payload.body.data || \"\")\n    let buffer = Buffer.from(message.payload.body.data || \"\", \"base64\");\n    message.html = buffer.toString(\"utf8\")\n  }\n}\n\nreturn $input.all();"
      },
      "id": "db4b6481-5fdb-4bc3-a10f-b6ccfb5b0bf0",
      "name": "Decode messages",
      "type": "n8n-nodes-base.code",
      "position": [
        1776,
        720
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const html = $('Decode messages').item.json.messages[0].html\nconst matches = html.match(/data-ph='([^']*)'/)\nlet placeholders = {}\nif(matches?.length > 0) {\n  ph = JSON.parse(matches[1])\n  for(k of Object.keys(ph)) {\n    placeholders[k] = ph[k]\n  }\n}\nitem.json.placeholders = placeholders\n\nreturn item;"
      },
      "id": "fc4868f0-845d-4f76-a566-b0db3d2676f8",
      "name": "Decode placeholder values",
      "type": "n8n-nodes-base.code",
      "position": [
        2656,
        720
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "function extractPlaceholders(str) {\n    // Regular expression to match placeholders\n    // It matches any alphanumeric character including dashes and underscores between {}\n    const regex = /\\{([a-zA-Z0-9_-]+)\\}/g;\n    \n    // Set to store unique placeholders\n    const uniquePlaceholders = new Set();\n\n    // Extract and store unique placeholders\n    let match;\n    while ((match = regex.exec(str)) !== null) {\n        uniquePlaceholders.add(match[1]);\n    }\n\n    // Convert the Set to an array and return\n    return Array.from(uniquePlaceholders);\n}\n\n\n// Gather all the placeholder values for passing on\nconst all_ph_raw = $('Email sequence').first().json.emails.flatMap(e => extractPlaceholders(e.message))\nconst all_ph = [...new Set(all_ph_raw)];\nlet placeholders = {}\nfor(ph of all_ph) {\n  if($('Get emails').item.json[ph] == undefined) throw new Error(`Message placeholder '{${ph}}' requires a column called '${ph}' in the Google Sheet`)\n  placeholders[ph] = $('Get emails').item.json[ph]\n}\n\nitem.json.placeholders = placeholders\n\nreturn item;"
      },
      "id": "5af9b08e-6c5d-4701-a44a-794e96216948",
      "name": "Package placeholder values",
      "type": "n8n-nodes-base.code",
      "position": [
        2000,
        240
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5e327a1d-3f2e-40f1-aaa1-9ce888349eb0",
              "name": "sheet_url",
              "type": "string",
              "value": "https://docs.google.com/spreadsheets/d/1Q_sZjxUsAkBvrsNIKm7JX8qhDQIIHLoHsjI-J_rYCTg/edit?gid=0#gid=0"
            },
            {
              "id": "3255270a-3ac2-4c59-8215-ea79256b55cc",
              "name": "subject",
              "type": "string",
              "value": "AI SKILLBRIDGE BOOTCAMP"
            },
            {
              "id": "76b40b74-acef-49f1-a0e2-0be9a461319a",
              "name": "sender_name",
              "type": "string",
              "value": "Aqib Qureshi"
            },
            {
              "id": "4532eb84-5ebc-4011-8c65-d97aeae21256",
              "name": "email_column_name",
              "type": "string",
              "value": "email"
            },
            {
              "id": "83de0ceb-39ec-426a-afba-13d66bce101d",
              "name": "mail_id",
              "type": "string",
              "value": "123456"
            }
          ]
        },
        "options": {}
      },
      "id": "e655a9c2-617b-4119-9582-45f1db2cc6d2",
      "name": "Settings",
      "type": "n8n-nodes-base.set",
      "position": [
        832,
        240
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "operation": "reply",
        "messageId": "={{ $json.reply_message_id }}",
        "message": "={{ $json.message }}",
        "options": {
          "senderName": "David Roberts"
        }
      },
      "id": "a8975f91-6413-448b-bc3f-1084959b8b31",
      "name": "Reply to message",
      "type": "n8n-nodes-base.gmail",
      "position": [
        2432,
        1120
      ],
      "typeVersion": 2,
      "webhookId": "9b2f0c6a-b902-4bee-8414-afd4f40f6cd3",
      "credentials": {
        "gmailOAuth2": {
          "id": "fDnA9srVk8MLF6IH",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "mode": "url",
          "value": "={{ $('Settings').item.json.sheet_url }}"
        },
        "sheetName": {
          "__rl": true,
          "mode": "url",
          "value": "={{ $('Settings').item.json.sheet_url }}"
        },
        "options": {}
      },
      "id": "d453661e-25f7-471c-90dc-633270f14396",
      "name": "Get emails",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        1328,
        240
      ],
      "typeVersion": 4.2,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "r1uGKSXZDAx3tjRo",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Send initial emails",
        "height": 515.1374038700677,
        "width": 1790.5345476157208,
        "color": 7
      },
      "id": "7a838728-38e1-45f9-8bac-19c6ad005a38",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1280,
        -80
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Send follow-up emails if appropriate",
        "height": 515.1374038700677,
        "width": 1797.4980261229769,
        "color": 7
      },
      "id": "5d8823c1-00a7-43a2-963d-90e971167ef8",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1280,
        464
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Sub-workflow for sending the emails\nThis is called by the sections above - you shouldn't need to touch it",
        "height": 515.1374038700677,
        "width": 1797.4980261229769,
        "color": 7
      },
      "id": "fd2bb0b2-a313-45ed-ad58-935d803237e5",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1280,
        1024
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "triggerAtMinute": 12
            }
          ]
        }
      },
      "id": "be4a4bbb-1e10-4c9e-afb9-cc4a46a78113",
      "name": "Every hour",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        368,
        240
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "content": "If reply_message_id is set, will reply to that message.\n\nOtherwise, will send a new message to the user in the 'email' field",
        "height": 306.5470605243249,
        "width": 181.66573318934627,
        "color": 7
      },
      "id": "be582e38-6da2-4c64-8804-981936f71d88",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2176,
        1072
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "195ce0cf-9d25-4e02-9f20-aa6edbc2d561",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $now.isWeekend() }}",
              "rightValue": ""
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "88e9ff03-62f0-4dcf-9e28-62c95386df66",
      "name": "Don't email on weekends",
      "type": "n8n-nodes-base.filter",
      "position": [
        560,
        384
      ],
      "typeVersion": 2,
      "disabled": true
    },
    {
      "parameters": {
        "content": "üìå Instructions for AI SkillBridge Email Campaign Setup\n\nClone this Google Sheet\n and update its URL in the Settings node.\n\nEdit the Email Sequence node to customize messages for students.\n\nUse send_on_day to set delay between emails.\n\nEmails are in HTML (you can add links, bold text, placeholders like {name}).",
        "height": 467,
        "width": 420
      },
      "id": "7a5822f3-b2ea-42d7-8034-21a92e283112",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        784,
        -48
      ],
      "typeVersion": 1
    }
  ],
  "pinData": {},
  "connections": {
    "Settings": {
      "main": [
        [
          {
            "node": "Email sequence",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replying?": {
      "main": [
        [
          {
            "node": "Reply to message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send new message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "To email?": {
      "main": [
        [
          {
            "node": "Prepare first message params",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Every hour": {
      "main": [
        [
          {
            "node": "Settings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get emails": {
      "main": [
        [
          {
            "node": "To email?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Email sequence": {
      "main": [
        [
          {
            "node": "Get previous message threads",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compose message": {
      "main": [
        [
          {
            "node": "Replying?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Decode messages": {
      "main": [
        [
          {
            "node": "Classify threads",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Classify threads": {
      "main": [
        [
          {
            "node": "Next message due?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Next message due?": {
      "main": [
        [
          {
            "node": "Prepare reply params",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get thread details": {
      "main": [
        [
          {
            "node": "Decode messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare reply params": {
      "main": [
        [
          {
            "node": "Decode placeholder values",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set message template": {
      "main": [
        [
          {
            "node": "Fill message placeholders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Don't email on weekends": {
      "main": [
        []
      ]
    },
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Set message template",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Decode placeholder values": {
      "main": [
        [
          {
            "node": "Call message send sub-workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fill message placeholders": {
      "main": [
        [
          {
            "node": "Compose message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Package placeholder values": {
      "main": [
        [
          {
            "node": "Call message send sub-workflow1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get previous message threads": {
      "main": [
        [
          {
            "node": "Get thread details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare first message params": {
      "main": [
        [
          {
            "node": "Package placeholder values",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call message send sub-workflow1": {
      "main": [
        [
          {
            "node": "Update last contacted time",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "versionId": "d9e61700-504f-479c-b551-4e4335b4ea14",
  "meta": {
    "templateId": "2137",
    "instanceId": "f33014a849c882656bf879979d3f944c6b29c207fecad86b3e93a5487a590dee"
  },
  "id": "vuChwkSGvlYTGS5w",
  "tags": []
}